// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * For documentation, refer to the original repository:
 * https://github.com/Mendix-Toolkit/action-clear-object
 * @param {MxObject} targetObject
 * @param {boolean} clearAssociations
 * @param {boolean} commitObject
 * @returns {Promise.<void>}
 */
export async function JS_ClearObject(targetObject, clearAssociations, commitObject) {
	// BEGIN USER CODE
	let entityName = targetObject.getEntity();
	try {
		for (let attributeName of targetObject.getAttributes()) {
			if (targetObject.isReadonlyAttr(attributeName)) continue;
			if (attributeName.includes(".") && !clearAssociations) continue;

			let attribute = targetObject.get(attributeName);

			switch (typeof attribute) {
				case "boolean":
					targetObject.set(attributeName, false);
					break;

				case "string":
					try {
						targetObject.set(attributeName, null);
					} catch {
						mx.logger.info(`Skipped ${attributeName} of probable type AutoNumber for Entity of type ${entityName}`);
					}
					break;

				default:
					if (attribute instanceof Big) {
						targetObject.set(attributeName, new Big(0));
					} else {
						targetObject.set(attributeName, null);
					}
					break;
			}
		}
		if (commitObject)
			mx.data.commit({ mxobj: targetObject, callback: () => { } });
		mx.logger.info(`Cleared attributes for object of type ${entityName}.`);

	} catch (e) {
		mx.logger.info(`Could not clear attributes for object of type ${entityName}. \n ${e}`);
	}
	// END USER CODE
}
