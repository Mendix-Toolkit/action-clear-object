// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package clearobject.actions;

import java.util.Map;
import java.util.Map.Entry;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.webui.CustomJavaAction;
import com.mendix.core.objectmanagement.member.MendixBoolean;
import com.mendix.core.objectmanagement.member.MendixAutoNumber;
import com.mendix.core.objectmanagement.member.MendixObjectReference;
import com.mendix.core.objectmanagement.member.MendixObjectReferenceSet;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;

public class Java_ClearObject extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String logNode;
	private IMendixObject targetObject;
	private java.lang.Boolean clearAssociations;
	private java.lang.Boolean clearSystemMembers;
	private java.lang.Boolean commitObject;

	public Java_ClearObject(IContext context, java.lang.String logNode, IMendixObject targetObject, java.lang.Boolean clearAssociations, java.lang.Boolean clearSystemMembers, java.lang.Boolean commitObject)
	{
		super(context);
		this.logNode = logNode;
		this.targetObject = targetObject;
		this.clearAssociations = clearAssociations;
		this.clearSystemMembers = clearSystemMembers;
		this.commitObject = commitObject;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		ILogNode logger = Core.getLogger(logNode);
		IContext context = getContext();

		IMetaObject metaObject = targetObject.getMetaObject();
		String[] entityNameArr = metaObject.getName().split("\\.");
		String entityName = entityNameArr[1];

		try {
			Map<String, ? extends IMendixObjectMember<?>> objectMembers = targetObject.getMembers(context);

			for (Entry<String, ? extends IMendixObjectMember<?>> mapMember : objectMembers.entrySet()) {

				// getMembers() returns non-editable map
				String memberName = mapMember.getKey();
				IMendixObjectMember<?> member = targetObject.getMember(context, memberName);
				
				if (member instanceof MendixAutoNumber)
					continue;
				else if (member instanceof MendixBoolean) {
					targetObject.setValue(context, memberName, false);
					continue;
				}

				// Mendix does not provide a way to identify System Members
				else if (memberName.equals("createdDate") || memberName.equals("changedDate")) {
					{

						if (clearSystemMembers)
							member.setValue(context, null);
					}
					continue;

				} else if (member instanceof MendixObjectReference || member instanceof MendixObjectReferenceSet) {
					{
						if (memberName.equals("System.owner") || memberName.equals("System.changedBy"))
							if (clearSystemMembers)
								member.setValue(context, null);
							else
								continue;

						else if (clearAssociations)
							member.setValue(context, null);
					}
					continue;
				}

				member.setValue(context, null);
			}

			if (commitObject)
				Core.commit(context, targetObject);
			logger.info("Cleared attributes for object of type " + entityName + ".");

		} catch (Exception e) {
			logger.info("Could not clear attributes for object of type " + entityName + "." + "\n" + e);
		}

		return null;

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Java_ClearObject";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
